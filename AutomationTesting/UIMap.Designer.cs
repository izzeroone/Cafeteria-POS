// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace AutomationTesting
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Login as employee first
        /// </summary>
        public void loginAsEmployee()
        {
            #region Variable Declarations
            WpfEdit uITxtUsernameEdit = this.UILoginWindow.UITxtUsernameEdit;
            WpfButton uIItemButton = this.UILoginWindow.UIItemButton;
            WpfEdit uITxtPassEdit = this.UILoginWindow.UITxtPassEdit;
            #endregion

            // Type 'username' in 'txtUsername' text box
            uITxtUsernameEdit.Text = this.loginAsEmployeeParams.UITxtUsernameEditText;

            // Type '{Tab}' in 'txtUsername' text box
            Keyboard.SendKeys(uITxtUsernameEdit, this.loginAsEmployeeParams.UITxtUsernameEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in button
            Keyboard.SendKeys(uIItemButton, this.loginAsEmployeeParams.UIItemButtonSendKeys, ModifierKeys.None);

            // Type '********' in 'txtPass' text box
            Keyboard.SendKeys(uITxtPassEdit, this.loginAsEmployeeParams.UITxtPassEditSendKeys, true);
        }
        
        /// <summary>
        /// clickOnFirstProduct
        /// </summary>
        public void clickOnFirstProduct()
        {
            #region Variable Declarations
            WpfImage uIItemImage = this.UIMainWindowWindow.UITabControlCustom.UILvCategoryDrinkList.UIP000000001ListItem.UIAppleTonicText.UIItemImage;
            #endregion

            // Click first image next to 'Apple Tonic' label
            Mouse.Click(uIItemImage, new Point(67, 38));
        }
        
        /// <summary>
        /// showMustLoginDialogAssert - Use 'showMustLoginDialogAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void showMustLoginDialogAssert()
        {
            #region Variable Declarations
            WinText uIYoushouldloginbeforeText = this.UIYoushouldloginbeforeWindow.UIYoushouldloginbeforeText;
            #endregion

            // Verify that the 'Name' property of 'You should login before' label equals 'You should login before'
            Assert.AreEqual(this.showMustLoginDialogAssertExpectedValues.UIYoushouldloginbeforeTextName, uIYoushouldloginbeforeText.Name);
        }
        
        /// <summary>
        /// startWorking - Use 'startWorkingParams' to pass parameters into this method.
        /// </summary>
        public void startWorking()
        {
            #region Variable Declarations
            WpfToggleButton uIItem1employeesavailaToggleButton = this.UIMainWindowWindow.UIItem1employeesavailaToggleButton;
            WpfButton uIStartWorkingButton = this.UIMainWindowWindow.UIStartWorkingButton;
            WpfControl uIItemDataItem = this.UIAllEmployeeLoginWindow.UILvLoginListTable.UIItemDataItem;
            WpfButton uIStartWorkingButton1 = this.UIAllEmployeeLoginWindow.UIStartWorkingButton;
            WpfEdit uITxtPassEdit = this.UIAllEmployeeLoginWindow.UITxtPassEdit;
            WpfButton uIStartButton = this.UIAllEmployeeLoginWindow.UIStartButton;
            #endregion

            // Set to 'Pressed' state '1 employee(s) available' toggle button
            uIItem1employeesavailaToggleButton.Pressed = this.startWorkingParams.UIItem1employeesavailaToggleButtonPressed;

            // Click 'Start Working' button
            Mouse.Click(uIStartWorkingButton, new Point(30, 11));

            // Click DataItem
            Mouse.Click(uIItemDataItem, new Point(90, 53));

            // Click 'Start Working' button
            Mouse.Click(uIStartWorkingButton1, new Point(60, 15));

            // Click 'txtPass' text box
            Mouse.Click(uITxtPassEdit, new Point(113, 33));

            // Type '********' in 'txtPass' text box
            Keyboard.SendKeys(uITxtPassEdit, this.startWorkingParams.UITxtPassEditSendKeys, true);

            // Click 'Start' button
            Mouse.Click(uIStartButton, new Point(28, 21));
        }
        
        /// <summary>
        /// singleItemAssert - Use 'singleItemAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void singleItemAssert()
        {
            #region Variable Declarations
            WpfTable uILvDataTable = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UILvDataTable;
            WpfCell uIFruitPlatterCell = this.UIMainWindowWindow.UIItemGroup.UILvDataTable.UIItemDataItem.UIFruitPlatterCell;
            WpfText uIFruitPlatterText = this.UIMainWindowWindow.UITabControlCustom.UILvCategoryDrinkList.UIP000000001ListItem.UIFruitPlatterText;
            #endregion

            // Verify that the 'RowCount' property of 'lvData' table equals '1'
            Assert.AreEqual(this.singleItemAssertExpectedValues.UILvDataTableRowCount, uILvDataTable.RowCount, "Should add single item");

            // Verify that the 'FriendlyName' property of 'Apple Tonic' cell equals 'Apple Tonic'
            Assert.AreEqual(this.singleItemAssertExpectedValues.UIFruitPlatterCellFriendlyName, uIFruitPlatterCell.FriendlyName, "shouldBeTheFirstItem");

            // Verify that the 'DisplayText' property of 'Apple Tonic' label equals 'Apple Tonic'
            Assert.AreEqual(this.singleItemAssertExpectedValues.UIFruitPlatterTextDisplayText, uIFruitPlatterText.DisplayText, "Click item should be Fruiit Platter");
        }
        
        /// <summary>
        /// twoItemAssert - Use 'twoItemAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void twoItemAssert()
        {
            #region Variable Declarations
            WpfText uIFruitPlatterText = this.UIMainWindowWindow.UITabControlCustom.UILvCategoryDrinkList.UIP000000001ListItem.UIFruitPlatterText;
            WpfCell uIFruitPlatterCell = this.UIMainWindowWindow.UIItemGroup.UILvDataTable.UIItemDataItem.UIFruitPlatterCell;
            WpfCell uIItem2Cell = this.UIMainWindowWindow.UIItemGroup.UILvDataTable.UIItemDataItem.UIItem2Cell;
            WpfCell uIItem65000Cell = this.UIMainWindowWindow.UIItemGroup.UILvDataTable.UIItemDataItem.UIItem65000Cell;
            WpfTable uILvDataTable = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UILvDataTable;
            WpfEdit uITxtTotalEdit = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UITxtTotalEdit;
            #endregion

            // Verify that the 'Name' property of 'Apple Tonic' label equals 'Apple Tonic'
            Assert.AreEqual(this.twoItemAssertExpectedValues.UIFruitPlatterTextName, uIFruitPlatterText.Name);

            // Verify that the 'ControlType' property of 'Apple Tonic' cell equals 'Cell'
            Assert.AreEqual(this.twoItemAssertExpectedValues.UIFruitPlatterCellControlType, uIFruitPlatterCell.ControlType.ToString());

            // Verify that the 'ControlType' property of '2' cell equals 'Cell'
            Assert.AreEqual(this.twoItemAssertExpectedValues.UIItem2CellControlType, uIItem2Cell.ControlType.ToString());

            // Verify that the 'ControlType' property of '65.000' cell equals 'Cell'
            Assert.AreEqual(this.twoItemAssertExpectedValues.UIItem65000CellControlType, uIItem65000Cell.ControlType.ToString());

            // Verify that the 'RowCount' property of 'lvData' table equals '1'
            Assert.AreEqual(this.twoItemAssertExpectedValues.UILvDataTableRowCount, uILvDataTable.RowCount);

            // Verify that the 'ControlType' property of 'txtTotal' text box equals 'Edit'
            Assert.AreEqual(this.twoItemAssertExpectedValues.UITxtTotalEditControlType, uITxtTotalEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// deleteItem
        /// </summary>
        public void deleteItem()
        {
            #region Variable Declarations
            WpfButton uIXButton = this.UIMainWindowWindow.UIItemGroup.UILvDataTable.UIItemDataItem.UIItemCell.UIXButton;
            #endregion

            // Click 'x' button
            Mouse.Click(uIXButton, new Point(15, 15));
        }
        
        /// <summary>
        /// emplyOrderAssert - Use 'emplyOrderAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void emplyOrderAssert()
        {
            #region Variable Declarations
            WpfTable uILvDataTable = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UILvDataTable;
            #endregion

            // Verify that the 'RowCount' property of 'lvData' table equals '0'
            Assert.AreEqual(this.emplyOrderAssertExpectedValues.UILvDataTableRowCount, uILvDataTable.RowCount);
        }
        
        /// <summary>
        /// closeDialog
        /// </summary>
        public void closeDialog()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(60, 10));
        }
        
        /// <summary>
        /// startApplication
        /// </summary>
        public void startApplication()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UICafochaWindow.UIItemWindow.UIBinListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UICafochaWindow.UIItemWindow1.UIDebugListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UICafochaWindow.UIItemWindow2.UICafochaListItem.UINameEdit;
            #endregion

            // Move 'Name' text box
            Mouse.StartDragging(uINameEdit, new Point(74, 61));
            Mouse.StopDragging(uINameEdit, -53, -59);

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(39, 12));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(74, 8));
        }
        
        /// <summary>
        /// launchApplication - Use 'launchApplicationParams' to pass parameters into this method.
        /// </summary>
        public void launchApplication()
        {

            // Launch 'D:\Projects\Cafeteria-POS\Cafocha\bin\Debug\Cafocha.exe'
            ApplicationUnderTest cafochaApplication = ApplicationUnderTest.Launch(this.launchApplicationParams.ExePath, this.launchApplicationParams.AlternateExePath);
        }
        
        /// <summary>
        /// closeApplication
        /// </summary>
        public void closeApplication()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow1.UIMainWindowTitleBar;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(1891, 10));
        }
        
        /// <summary>
        /// buzzOrder
        /// </summary>
        public void buzzOrder()
        {
            #region Variable Declarations
            WpfButton uIBuzzButton = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UIBuzzButton;
            #endregion

            // Click 'Buzz' button
            Mouse.Click(uIBuzzButton, new Point(81, 22));
        }
        
        /// <summary>
        /// buzzPreviewAssert - Use 'buzzPreviewAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void buzzPreviewAssert()
        {
            #region Variable Declarations
            WpfWindow uIPrintPreviewWindow = this.UIPrintPreviewWindow;
            #endregion

            // Verify that the 'Name' property of 'Print Preview' window equals 'Print Preview'
            Assert.AreEqual(this.buzzPreviewAssertExpectedValues.UIPrintPreviewWindowName, uIPrintPreviewWindow.Name);
        }
        
        /// <summary>
        /// payEmplyAmount
        /// </summary>
        public void payEmplyAmount()
        {
            #region Variable Declarations
            WpfButton uIPayButton = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UIPayButton;
            
            #endregion

            // Click 'Pay' button
            Mouse.Click(uIPayButton, new Point(56, 22));

            if (this.UIWpfWindow.UIKbInputCustom.WaitForControlReady())
            {
                WpfButton uIBtnGoButton = this.UIWpfWindow.UIKbInputCustom.UIBtnGoButton;
                Mouse.Click(uIBtnGoButton, new Point(38, 32));
            }
            // Click 'BtnGo' button
            
        }
        
        /// <summary>
        /// payLessThanAmount - Use 'payLessThanAmountParams' to pass parameters into this method.
        /// </summary>
        public void payLessThanAmount()
        {
            #region Variable Declarations
            WpfButton uIPayButton = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UIPayButton;
            #endregion

            // Click 'Pay' button
            Mouse.Click(uIPayButton, new Point(118, 24));


            if (this.UIWpfWindow.UIKbInputCustom.WaitForControlReady())
            {
                WpfEdit uITxtInputValueEdit = this.UIWpfWindow.UIKbInputCustom.UITxtInputValueEdit;
                WpfButton uIBtnGoButton = this.UIWpfWindow.UIKbInputCustom.UIBtnGoButton;

                // Type '30' in 'TxtInputValue' text box
                uITxtInputValueEdit.Text = this.payLessThanAmountParams.UITxtInputValueEditText;

                // Click 'BtnGo' button
                Mouse.Click(uIBtnGoButton, new Point(37, 12));
            }
        }
        
        /// <summary>
        /// assertNotEnoughMoney - Use 'assertNotEnoughMoneyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertNotEnoughMoney()
        {
            #region Variable Declarations
            WinText uIAllpaymentgrounduptoText = this.UIAllpaymentgrounduptoWindow.UIAllpaymentgrounduptoText;
            #endregion

            // Verify that the 'Name' property of 'All payment ground up to higher number!' label equals 'All payment ground up to higher number!'
            Assert.AreEqual(this.assertNotEnoughMoneyExpectedValues.UIAllpaymentgrounduptoTextName, uIAllpaymentgrounduptoText.Name);
        }
        
        /// <summary>
        /// payMoreThanAmount - Use 'payMoreThanAmountParams' to pass parameters into this method.
        /// </summary>
        public void payMoreThanAmount()
        {
            #region Variable Declarations
            WpfButton uIPayButton = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UIPayButton;
            #endregion

            // Click 'Pay' button
            Mouse.Click(uIPayButton, new Point(90, 13));

            if (this.UIWpfWindow.UIKbInputCustom.WaitForControlReady())
            {
                WpfEdit uITxtInputValueEdit = this.UIWpfWindow.UIKbInputCustom.UITxtInputValueEdit;
                WpfButton uIBtnGoButton = this.UIWpfWindow.UIKbInputCustom.UIBtnGoButton;

                // Type '200' in 'TxtInputValue' text box
                uITxtInputValueEdit.Text = this.payMoreThanAmountParams.UITxtInputValueEditText;

                // Click 'BtnGo' button
                Mouse.Click(uIBtnGoButton, new Point(54, 45));
            }
        }
        
        /// <summary>
        /// clickOnSecondProduct
        /// </summary>
        public void clickOnSecondProduct()
        {
            #region Variable Declarations
            WpfImage uIItemImage = this.UIMainWindowWindow.UITabControlCustom.UILvCategoryDrinkList.UIP000000002ListItem.UIClassicMilkteaText.UIItemImage;
            #endregion

            // Click first image next to 'Classic Milktea' label
            Mouse.Click(uIItemImage, new Point(49, 53));
        }
        
        /// <summary>
        /// twoProductAssert - Use 'twoProductAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void twoProductAssert()
        {
            #region Variable Declarations
            WpfTable uILvDataTable = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UILvDataTable;
            WpfCell uIItem2Cell = this.UIMainWindowWindow.UIItemGroup.UILvDataTable.UIItemDataItem.UIItem2Cell;
            WpfCell uIItem1Cell = this.UIMainWindowWindow.UIItemGroup.UILvDataTable.UIItemDataItem1.UIItem1Cell;
            #endregion

            // Verify that the 'RowCount' property of 'lvData' table equals '2'
            Assert.AreEqual(this.twoProductAssertExpectedValues.UILvDataTableRowCount, uILvDataTable.RowCount);

            // Verify that the 'Name' property of '2' cell equals '1'
            Assert.AreEqual(this.twoProductAssertExpectedValues.UIItem2CellName, uIItem2Cell.Name);

            // Verify that the 'Name' property of '1' cell equals '1'
            Assert.AreEqual(this.twoProductAssertExpectedValues.UIItem1CellName, uIItem1Cell.Name);
        }
        
        /// <summary>
        /// clearButtonClick
        /// </summary>
        public void clearButtonClick()
        {
            #region Variable Declarations
            WpfButton uIClearButton = this.UIMainWindowWindow.UIMyFramePane.UIUcOrderCustom.UIClearButton;
            #endregion

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(47, 15));
        }
        
        /// <summary>
        /// loginAsAdmin - Use 'loginAsAdminParams' to pass parameters into this method.
        /// </summary>
        public void loginAsAdmin()
        {
            #region Variable Declarations
            WpfEdit uITxtUsernameEdit = this.UILoginWindow.UITxtUsernameEdit;
            WpfButton uIItemButton = this.UILoginWindow.UIItemButton;
            WpfEdit uITxtPassEdit = this.UILoginWindow.UITxtPassEdit;
            #endregion

            // Launch 'D:\Projects\Cafeteria-POS\Cafocha\bin\Debug\Cafocha.exe'
            ApplicationUnderTest cafochaApplication = ApplicationUnderTest.Launch(this.loginAsAdminParams.ExePath, this.loginAsAdminParams.AlternateExePath);

            // Type 'admin' in 'txtUsername' text box
            uITxtUsernameEdit.Text = this.loginAsAdminParams.UITxtUsernameEditText;

            // Type '{Tab}' in 'txtUsername' text box
            Keyboard.SendKeys(uITxtUsernameEdit, this.loginAsAdminParams.UITxtUsernameEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in button
            Keyboard.SendKeys(uIItemButton, this.loginAsAdminParams.UIItemButtonSendKeys, ModifierKeys.None);

            // Type '********' in 'txtPass' text box
            Keyboard.SendKeys(uITxtPassEdit, this.loginAsAdminParams.UITxtPassEditSendKeys, true);
        }
        
        /// <summary>
        /// launchAdminWorkSpace
        /// </summary>
        public void launchAdminWorkSpace()
        {
            #region Variable Declarations
            WpfButton uIGotoAdminWSButtonButton = this.UIAdminNavWindowWindow.UIItemPane.UIGotoAdminWSButtonButton;
            #endregion

            // Click 'GotoAdminWSButton' button
            Mouse.Click(uIGotoAdminWSButtonButton, new Point(74, 19));
        }
        
        #region Properties
        public virtual loginAsEmployeeParams loginAsEmployeeParams
        {
            get
            {
                if ((this.mloginAsEmployeeParams == null))
                {
                    this.mloginAsEmployeeParams = new loginAsEmployeeParams();
                }
                return this.mloginAsEmployeeParams;
            }
        }
        
        public virtual showMustLoginDialogAssertExpectedValues showMustLoginDialogAssertExpectedValues
        {
            get
            {
                if ((this.mshowMustLoginDialogAssertExpectedValues == null))
                {
                    this.mshowMustLoginDialogAssertExpectedValues = new showMustLoginDialogAssertExpectedValues();
                }
                return this.mshowMustLoginDialogAssertExpectedValues;
            }
        }
        
        public virtual startWorkingParams startWorkingParams
        {
            get
            {
                if ((this.mstartWorkingParams == null))
                {
                    this.mstartWorkingParams = new startWorkingParams();
                }
                return this.mstartWorkingParams;
            }
        }
        
        public virtual singleItemAssertExpectedValues singleItemAssertExpectedValues
        {
            get
            {
                if ((this.msingleItemAssertExpectedValues == null))
                {
                    this.msingleItemAssertExpectedValues = new singleItemAssertExpectedValues();
                }
                return this.msingleItemAssertExpectedValues;
            }
        }
        
        public virtual twoItemAssertExpectedValues twoItemAssertExpectedValues
        {
            get
            {
                if ((this.mtwoItemAssertExpectedValues == null))
                {
                    this.mtwoItemAssertExpectedValues = new twoItemAssertExpectedValues();
                }
                return this.mtwoItemAssertExpectedValues;
            }
        }
        
        public virtual emplyOrderAssertExpectedValues emplyOrderAssertExpectedValues
        {
            get
            {
                if ((this.memplyOrderAssertExpectedValues == null))
                {
                    this.memplyOrderAssertExpectedValues = new emplyOrderAssertExpectedValues();
                }
                return this.memplyOrderAssertExpectedValues;
            }
        }
        
        public virtual launchApplicationParams launchApplicationParams
        {
            get
            {
                if ((this.mlaunchApplicationParams == null))
                {
                    this.mlaunchApplicationParams = new launchApplicationParams();
                }
                return this.mlaunchApplicationParams;
            }
        }
        
        public virtual buzzPreviewAssertExpectedValues buzzPreviewAssertExpectedValues
        {
            get
            {
                if ((this.mbuzzPreviewAssertExpectedValues == null))
                {
                    this.mbuzzPreviewAssertExpectedValues = new buzzPreviewAssertExpectedValues();
                }
                return this.mbuzzPreviewAssertExpectedValues;
            }
        }
        
        public virtual payLessThanAmountParams payLessThanAmountParams
        {
            get
            {
                if ((this.mpayLessThanAmountParams == null))
                {
                    this.mpayLessThanAmountParams = new payLessThanAmountParams();
                }
                return this.mpayLessThanAmountParams;
            }
        }
        
        public virtual assertNotEnoughMoneyExpectedValues assertNotEnoughMoneyExpectedValues
        {
            get
            {
                if ((this.massertNotEnoughMoneyExpectedValues == null))
                {
                    this.massertNotEnoughMoneyExpectedValues = new assertNotEnoughMoneyExpectedValues();
                }
                return this.massertNotEnoughMoneyExpectedValues;
            }
        }
        
        public virtual payMoreThanAmountParams payMoreThanAmountParams
        {
            get
            {
                if ((this.mpayMoreThanAmountParams == null))
                {
                    this.mpayMoreThanAmountParams = new payMoreThanAmountParams();
                }
                return this.mpayMoreThanAmountParams;
            }
        }
        
        public virtual twoProductAssertExpectedValues twoProductAssertExpectedValues
        {
            get
            {
                if ((this.mtwoProductAssertExpectedValues == null))
                {
                    this.mtwoProductAssertExpectedValues = new twoProductAssertExpectedValues();
                }
                return this.mtwoProductAssertExpectedValues;
            }
        }
        
        public virtual loginAsAdminParams loginAsAdminParams
        {
            get
            {
                if ((this.mloginAsAdminParams == null))
                {
                    this.mloginAsAdminParams = new loginAsAdminParams();
                }
                return this.mloginAsAdminParams;
            }
        }
        
        public UILoginWindow UILoginWindow
        {
            get
            {
                if ((this.mUILoginWindow == null))
                {
                    this.mUILoginWindow = new UILoginWindow();
                }
                return this.mUILoginWindow;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIYoushouldloginbeforeWindow UIYoushouldloginbeforeWindow
        {
            get
            {
                if ((this.mUIYoushouldloginbeforeWindow == null))
                {
                    this.mUIYoushouldloginbeforeWindow = new UIYoushouldloginbeforeWindow();
                }
                return this.mUIYoushouldloginbeforeWindow;
            }
        }
        
        public UIAllEmployeeLoginWindow UIAllEmployeeLoginWindow
        {
            get
            {
                if ((this.mUIAllEmployeeLoginWindow == null))
                {
                    this.mUIAllEmployeeLoginWindow = new UIAllEmployeeLoginWindow();
                }
                return this.mUIAllEmployeeLoginWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UICafochaWindow UICafochaWindow
        {
            get
            {
                if ((this.mUICafochaWindow == null))
                {
                    this.mUICafochaWindow = new UICafochaWindow();
                }
                return this.mUICafochaWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        
        public UIPrintPreviewWindow UIPrintPreviewWindow
        {
            get
            {
                if ((this.mUIPrintPreviewWindow == null))
                {
                    this.mUIPrintPreviewWindow = new UIPrintPreviewWindow();
                }
                return this.mUIPrintPreviewWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIAllpaymentgrounduptoWindow UIAllpaymentgrounduptoWindow
        {
            get
            {
                if ((this.mUIAllpaymentgrounduptoWindow == null))
                {
                    this.mUIAllpaymentgrounduptoWindow = new UIAllpaymentgrounduptoWindow();
                }
                return this.mUIAllpaymentgrounduptoWindow;
            }
        }
        
        public UIAdminNavWindowWindow UIAdminNavWindowWindow
        {
            get
            {
                if ((this.mUIAdminNavWindowWindow == null))
                {
                    this.mUIAdminNavWindowWindow = new UIAdminNavWindowWindow();
                }
                return this.mUIAdminNavWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private loginAsEmployeeParams mloginAsEmployeeParams;
        
        private showMustLoginDialogAssertExpectedValues mshowMustLoginDialogAssertExpectedValues;
        
        private startWorkingParams mstartWorkingParams;
        
        private singleItemAssertExpectedValues msingleItemAssertExpectedValues;
        
        private twoItemAssertExpectedValues mtwoItemAssertExpectedValues;
        
        private emplyOrderAssertExpectedValues memplyOrderAssertExpectedValues;
        
        private launchApplicationParams mlaunchApplicationParams;
        
        private buzzPreviewAssertExpectedValues mbuzzPreviewAssertExpectedValues;
        
        private payLessThanAmountParams mpayLessThanAmountParams;
        
        private assertNotEnoughMoneyExpectedValues massertNotEnoughMoneyExpectedValues;
        
        private payMoreThanAmountParams mpayMoreThanAmountParams;
        
        private twoProductAssertExpectedValues mtwoProductAssertExpectedValues;
        
        private loginAsAdminParams mloginAsAdminParams;
        
        private UILoginWindow mUILoginWindow;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIYoushouldloginbeforeWindow mUIYoushouldloginbeforeWindow;
        
        private UIAllEmployeeLoginWindow mUIAllEmployeeLoginWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UICafochaWindow mUICafochaWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        
        private UIPrintPreviewWindow mUIPrintPreviewWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIAllpaymentgrounduptoWindow mUIAllpaymentgrounduptoWindow;
        
        private UIAdminNavWindowWindow mUIAdminNavWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'loginAsEmployee'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class loginAsEmployeeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'username' in 'txtUsername' text box
        /// </summary>
        public string UITxtUsernameEditText = "username";
        
        /// <summary>
        /// Type '{Tab}' in 'txtUsername' text box
        /// </summary>
        public string UITxtUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in button
        /// </summary>
        public string UIItemButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'txtPass' text box
        /// </summary>
        public string UITxtPassEditSendKeys = "QWwOodIXpSOiF7DgPuhHMs3XiW84RR7gnYlplN8/J3g=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'showMustLoginDialogAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class showMustLoginDialogAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'You should login before' label equals 'You should login before'
        /// </summary>
        public string UIYoushouldloginbeforeTextName = "You should login before";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'startWorking'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class startWorkingParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state '1 employee(s) available' toggle button
        /// </summary>
        public bool UIItem1employeesavailaToggleButtonPressed = true;
        
        /// <summary>
        /// Type '********' in 'txtPass' text box
        /// </summary>
        public string UITxtPassEditSendKeys = "vm3c36yob/RBDyqNuXn60A1CT6ngG/OTFCJ0eXS4JiRsOj/c/TGNkkIbHPQn+2LysMqXqVcFdnv3wx/Iy" +
            "698rUb+QUR6q3ha31QrhLnrMsHwcIq18E8HatApxAQPoVc5ycMplUa6K6YythtCZjI5ikyGuqZItCfSg" +
            "6mngueoMz4FWzl6S3WTjkU4Qmy6oXNTWKxvDid8EkQ4oTfF+am8Qw==";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'singleItemAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class singleItemAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'RowCount' property of 'lvData' table equals '1'
        /// </summary>
        public int UILvDataTableRowCount = 1;
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Apple Tonic' cell equals 'Apple Tonic'
        /// </summary>
        public string UIFruitPlatterCellFriendlyName = "Apple Tonic";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Apple Tonic' label equals 'Apple Tonic'
        /// </summary>
        public string UIFruitPlatterTextDisplayText = "Apple Tonic";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'twoItemAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class twoItemAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Apple Tonic' label equals 'Apple Tonic'
        /// </summary>
        public string UIFruitPlatterTextName = "Apple Tonic";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Apple Tonic' cell equals 'Cell'
        /// </summary>
        public string UIFruitPlatterCellControlType = "Cell";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '2' cell equals 'Cell'
        /// </summary>
        public string UIItem2CellControlType = "Cell";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '65.000' cell equals 'Cell'
        /// </summary>
        public string UIItem65000CellControlType = "Cell";
        
        /// <summary>
        /// Verify that the 'RowCount' property of 'lvData' table equals '1'
        /// </summary>
        public int UILvDataTableRowCount = 1;
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtTotal' text box equals 'Edit'
        /// </summary>
        public string UITxtTotalEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'emplyOrderAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class emplyOrderAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'RowCount' property of 'lvData' table equals '0'
        /// </summary>
        public int UILvDataTableRowCount = 0;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'launchApplication'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class launchApplicationParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Projects\Cafeteria-POS\Cafocha\bin\Debug\Cafocha.exe'
        /// </summary>
        public string ExePath = "D:\\Projects\\Cafeteria-POS\\Cafocha\\bin\\Debug\\Cafocha.exe";
        
        /// <summary>
        /// Launch 'D:\Projects\Cafeteria-POS\Cafocha\bin\Debug\Cafocha.exe'
        /// </summary>
        public string AlternateExePath = "D:\\Projects\\Cafeteria-POS\\Cafocha\\bin\\Debug\\Cafocha.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'buzzPreviewAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class buzzPreviewAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Print Preview' window equals 'Print Preview'
        /// </summary>
        public string UIPrintPreviewWindowName = "Print Preview";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'payLessThanAmount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class payLessThanAmountParams
    {
        
        #region Fields
        /// <summary>
        /// Type '30' in 'TxtInputValue' text box
        /// </summary>
        public string UITxtInputValueEditText = "30";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertNotEnoughMoney'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class assertNotEnoughMoneyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'All payment ground up to higher number!' label equals 'All payment ground up to higher number!'
        /// </summary>
        public string UIAllpaymentgrounduptoTextName = "All payment ground up to higher number!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'payMoreThanAmount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class payMoreThanAmountParams
    {
        
        #region Fields
        /// <summary>
        /// Type '200' in 'TxtInputValue' text box
        /// </summary>
        public string UITxtInputValueEditText = "200";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'twoProductAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class twoProductAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'RowCount' property of 'lvData' table equals '2'
        /// </summary>
        public int UILvDataTableRowCount = 2;
        
        /// <summary>
        /// Verify that the 'Name' property of '2' cell equals '1'
        /// </summary>
        public string UIItem2CellName = "1";
        
        /// <summary>
        /// Verify that the 'Name' property of '1' cell equals '1'
        /// </summary>
        public string UIItem1CellName = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'loginAsAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class loginAsAdminParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Projects\Cafeteria-POS\Cafocha\bin\Debug\Cafocha.exe'
        /// </summary>
        public string ExePath = "D:\\Projects\\Cafeteria-POS\\Cafocha\\bin\\Debug\\Cafocha.exe";
        
        /// <summary>
        /// Launch 'D:\Projects\Cafeteria-POS\Cafocha\bin\Debug\Cafocha.exe'
        /// </summary>
        public string AlternateExePath = "D:\\Projects\\Cafeteria-POS\\Cafocha\\bin\\Debug\\Cafocha.exe";
        
        /// <summary>
        /// Type 'admin' in 'txtUsername' text box
        /// </summary>
        public string UITxtUsernameEditText = "admin";
        
        /// <summary>
        /// Type '{Tab}' in 'txtUsername' text box
        /// </summary>
        public string UITxtUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in button
        /// </summary>
        public string UIItemButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'txtPass' text box
        /// </summary>
        public string UITxtPassEditSendKeys = "QWwOodIXpSOiF7DgPuhHMs3XiW84RR7gnYlplN8/J3g=";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginWindow : WpfWindow
    {
        
        public UILoginWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Login";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Login");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITxtUsernameEdit
        {
            get
            {
                if ((this.mUITxtUsernameEdit == null))
                {
                    this.mUITxtUsernameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtUsernameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtUsername";
                    this.mUITxtUsernameEdit.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUITxtUsernameEdit;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfEdit UITxtPassEdit
        {
            get
            {
                if ((this.mUITxtPassEdit == null))
                {
                    this.mUITxtPassEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtPassEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtPass";
                    this.mUITxtPassEdit.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUITxtPassEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITxtUsernameEdit;
        
        private WpfButton mUIItemButton;
        
        private WpfEdit mUITxtPassEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UITabControlCustom UITabControlCustom
        {
            get
            {
                if ((this.mUITabControlCustom == null))
                {
                    this.mUITabControlCustom = new UITabControlCustom(this);
                }
                return this.mUITabControlCustom;
            }
        }
        
        public WpfToggleButton UIItem1employeesavailaToggleButton
        {
            get
            {
                if ((this.mUIItem1employeesavailaToggleButton == null))
                {
                    this.mUIItem1employeesavailaToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIItem1employeesavailaToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Toggle";
                    this.mUIItem1employeesavailaToggleButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem1employeesavailaToggleButton;
            }
        }
        
        public WpfButton UIStartWorkingButton
        {
            get
            {
                if ((this.mUIStartWorkingButton == null))
                {
                    this.mUIStartWorkingButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartWorkingButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnStartWorking";
                    this.mUIStartWorkingButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIStartWorkingButton;
            }
        }
        
        public UIMyFramePane UIMyFramePane
        {
            get
            {
                if ((this.mUIMyFramePane == null))
                {
                    this.mUIMyFramePane = new UIMyFramePane(this);
                }
                return this.mUIMyFramePane;
            }
        }
        
        public UIItemGroup UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new UIItemGroup(this);
                }
                return this.mUIItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UITabControlCustom mUITabControlCustom;
        
        private WpfToggleButton mUIItem1employeesavailaToggleButton;
        
        private WpfButton mUIStartWorkingButton;
        
        private UIMyFramePane mUIMyFramePane;
        
        private UIItemGroup mUIItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITabControlCustom : WpfCustom
    {
        
        public UITabControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "tabControl";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UILvCategoryDrinkList UILvCategoryDrinkList
        {
            get
            {
                if ((this.mUILvCategoryDrinkList == null))
                {
                    this.mUILvCategoryDrinkList = new UILvCategoryDrinkList(this);
                }
                return this.mUILvCategoryDrinkList;
            }
        }
        #endregion
        
        #region Fields
        private UILvCategoryDrinkList mUILvCategoryDrinkList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILvCategoryDrinkList : WpfList
    {
        
        public UILvCategoryDrinkList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvCategoryDrink";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIP000000001ListItem UIP000000001ListItem
        {
            get
            {
                if ((this.mUIP000000001ListItem == null))
                {
                    this.mUIP000000001ListItem = new UIP000000001ListItem(this);
                }
                return this.mUIP000000001ListItem;
            }
        }
        
        public UIP000000002ListItem UIP000000002ListItem
        {
            get
            {
                if ((this.mUIP000000002ListItem == null))
                {
                    this.mUIP000000002ListItem = new UIP000000002ListItem(this);
                }
                return this.mUIP000000002ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIP000000001ListItem mUIP000000001ListItem;
        
        private UIP000000002ListItem mUIP000000002ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIP000000001ListItem : WpfListItem
    {
        
        public UIP000000001ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "P000000001";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIFruitPlatterText UIFruitPlatterText
        {
            get
            {
                if ((this.mUIFruitPlatterText == null))
                {
                    this.mUIFruitPlatterText = new UIFruitPlatterText(this);
                }
                return this.mUIFruitPlatterText;
            }
        }
        
        public UIAppleTonicText UIAppleTonicText
        {
            get
            {
                if ((this.mUIAppleTonicText == null))
                {
                    this.mUIAppleTonicText = new UIAppleTonicText(this);
                }
                return this.mUIAppleTonicText;
            }
        }
        #endregion
        
        #region Fields
        private UIFruitPlatterText mUIFruitPlatterText;
        
        private UIAppleTonicText mUIAppleTonicText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFruitPlatterText : WpfText
    {
        
        public UIFruitPlatterText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Apple Tonic";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppleTonicText : WpfText
    {
        
        public UIAppleTonicText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Apple Tonic";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIP000000002ListItem : WpfListItem
    {
        
        public UIP000000002ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "P000000002";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIBreadBasketText UIBreadBasketText
        {
            get
            {
                if ((this.mUIBreadBasketText == null))
                {
                    this.mUIBreadBasketText = new UIBreadBasketText(this);
                }
                return this.mUIBreadBasketText;
            }
        }
        
        public UIClassicMilkteaText UIClassicMilkteaText
        {
            get
            {
                if ((this.mUIClassicMilkteaText == null))
                {
                    this.mUIClassicMilkteaText = new UIClassicMilkteaText(this);
                }
                return this.mUIClassicMilkteaText;
            }
        }
        #endregion
        
        #region Fields
        private UIBreadBasketText mUIBreadBasketText;
        
        private UIClassicMilkteaText mUIClassicMilkteaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBreadBasketText : WpfText
    {
        
        public UIBreadBasketText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Bread Basket";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClassicMilkteaText : WpfText
    {
        
        public UIClassicMilkteaText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Classic Milktea";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMyFramePane : WpfPane
    {
        
        public UIMyFramePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "myFrame";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIUcOrderCustom UIUcOrderCustom
        {
            get
            {
                if ((this.mUIUcOrderCustom == null))
                {
                    this.mUIUcOrderCustom = new UIUcOrderCustom(this);
                }
                return this.mUIUcOrderCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUcOrderCustom mUIUcOrderCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUcOrderCustom : WpfCustom
    {
        
        public UIUcOrderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UcOder";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ucOrder";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfTable UILvDataTable
        {
            get
            {
                if ((this.mUILvDataTable == null))
                {
                    this.mUILvDataTable = new WpfTable(this);
                    #region Search Criteria
                    this.mUILvDataTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "lvData";
                    this.mUILvDataTable.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILvDataTable;
            }
        }
        
        public WpfEdit UITxtTotalEdit
        {
            get
            {
                if ((this.mUITxtTotalEdit == null))
                {
                    this.mUITxtTotalEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtTotalEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtTotal";
                    this.mUITxtTotalEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITxtTotalEdit;
            }
        }
        
        public WpfButton UIBuzzButton
        {
            get
            {
                if ((this.mUIBuzzButton == null))
                {
                    this.mUIBuzzButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBuzzButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "bntPrint";
                    this.mUIBuzzButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIBuzzButton;
            }
        }
        
        public WpfButton UIPayButton
        {
            get
            {
                if ((this.mUIPayButton == null))
                {
                    this.mUIPayButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPayButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "bntPay";
                    this.mUIPayButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPayButton;
            }
        }
        
        public WpfButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "bntDelete";
                    this.mUIClearButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfTable mUILvDataTable;
        
        private WpfEdit mUITxtTotalEdit;
        
        private WpfButton mUIBuzzButton;
        
        private WpfButton mUIPayButton;
        
        private WpfButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemGroup : WpfGroup
    {
        
        public UIItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UILvDataTable UILvDataTable
        {
            get
            {
                if ((this.mUILvDataTable == null))
                {
                    this.mUILvDataTable = new UILvDataTable(this);
                }
                return this.mUILvDataTable;
            }
        }
        #endregion
        
        #region Fields
        private UILvDataTable mUILvDataTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILvDataTable : WpfTable
    {
        
        public UILvDataTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "lvData";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIItemDataItem UIItemDataItem
        {
            get
            {
                if ((this.mUIItemDataItem == null))
                {
                    this.mUIItemDataItem = new UIItemDataItem(this);
                }
                return this.mUIItemDataItem;
            }
        }
        
        public UIItemDataItem1 UIItemDataItem1
        {
            get
            {
                if ((this.mUIItemDataItem1 == null))
                {
                    this.mUIItemDataItem1 = new UIItemDataItem1(this);
                }
                return this.mUIItemDataItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemDataItem mUIItemDataItem;
        
        private UIItemDataItem1 mUIItemDataItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemDataItem : WpfControl
    {
        
        public UIItemDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfCell UIFruitPlatterCell
        {
            get
            {
                if ((this.mUIFruitPlatterCell == null))
                {
                    this.mUIFruitPlatterCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIFruitPlatterCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Item";
                    this.mUIFruitPlatterCell.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIFruitPlatterCell;
            }
        }
        
        public WpfCell UIItem2Cell
        {
            get
            {
                if ((this.mUIItem2Cell == null))
                {
                    this.mUIItem2Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIItem2Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Amt";
                    this.mUIItem2Cell.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem2Cell;
            }
        }
        
        public WpfCell UIItem65000Cell
        {
            get
            {
                if ((this.mUIItem65000Cell == null))
                {
                    this.mUIItem65000Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIItem65000Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Price";
                    this.mUIItem65000Cell.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem65000Cell;
            }
        }
        
        public UIItemCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new UIItemCell(this);
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIFruitPlatterCell;
        
        private WpfCell mUIItem2Cell;
        
        private WpfCell mUIItem65000Cell;
        
        private UIItemCell mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCell : WpfCell
    {
        
        public UIItemCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Edit";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIXButton
        {
            get
            {
                if ((this.mUIXButton == null))
                {
                    this.mUIXButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIXButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "bntDelete";
                    this.mUIXButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIXButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIXButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemDataItem1 : WpfControl
    {
        
        public UIItemDataItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Amt";
                    this.mUIItem1Cell.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIItem1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIYoushouldloginbeforeWindow : WinWindow
    {
        
        public UIYoushouldloginbeforeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "You should login before";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("You should login before");
            #endregion
        }
        
        #region Properties
        public WinText UIYoushouldloginbeforeText
        {
            get
            {
                if ((this.mUIYoushouldloginbeforeText == null))
                {
                    this.mUIYoushouldloginbeforeText = new WinText(this);
                    #region Search Criteria
                    this.mUIYoushouldloginbeforeText.SearchProperties[WinText.PropertyNames.Name] = "You should login before";
                    this.mUIYoushouldloginbeforeText.WindowTitles.Add("You should login before");
                    #endregion
                }
                return this.mUIYoushouldloginbeforeText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIYoushouldloginbeforeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAllEmployeeLoginWindow : WpfWindow
    {
        
        public UIAllEmployeeLoginWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "All Employee Login";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("All Employee Login");
            #endregion
        }
        
        #region Properties
        public UILvLoginListTable UILvLoginListTable
        {
            get
            {
                if ((this.mUILvLoginListTable == null))
                {
                    this.mUILvLoginListTable = new UILvLoginListTable(this);
                }
                return this.mUILvLoginListTable;
            }
        }
        
        public WpfButton UIStartWorkingButton
        {
            get
            {
                if ((this.mUIStartWorkingButton == null))
                {
                    this.mUIStartWorkingButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartWorkingButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnStart";
                    this.mUIStartWorkingButton.WindowTitles.Add("All Employee Login");
                    #endregion
                }
                return this.mUIStartWorkingButton;
            }
        }
        
        public WpfEdit UITxtPassEdit
        {
            get
            {
                if ((this.mUITxtPassEdit == null))
                {
                    this.mUITxtPassEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtPassEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtPass";
                    this.mUITxtPassEdit.WindowTitles.Add("All Employee Login");
                    #endregion
                }
                return this.mUITxtPassEdit;
            }
        }
        
        public WpfButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnAcceptStart";
                    this.mUIStartButton.WindowTitles.Add("All Employee Login");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        #endregion
        
        #region Fields
        private UILvLoginListTable mUILvLoginListTable;
        
        private WpfButton mUIStartWorkingButton;
        
        private WpfEdit mUITxtPassEdit;
        
        private WpfButton mUIStartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILvLoginListTable : WpfTable
    {
        
        public UILvLoginListTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "lvLoginList";
            this.WindowTitles.Add("All Employee Login");
            #endregion
        }
        
        #region Properties
        public UIItemDataItem2 UIItemDataItem
        {
            get
            {
                if ((this.mUIItemDataItem == null))
                {
                    this.mUIItemDataItem = new UIItemDataItem2(this);
                }
                return this.mUIItemDataItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemDataItem2 mUIItemDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemDataItem2 : WpfControl
    {
        
        public UIItemDataItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("All Employee Login");
            #endregion
        }
        
        #region Properties
        public UIItemCell1 UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new UIItemCell1(this);
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCell1 mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCell1 : WpfCell
    {
        
        public UIItemCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Time Percent";
            this.WindowTitles.Add("All Employee Login");
            #endregion
        }
        
        #region Properties
        public WpfProgressBar UIItemProgressBar
        {
            get
            {
                if ((this.mUIItemProgressBar == null))
                {
                    this.mUIItemProgressBar = new WpfProgressBar(this);
                    #region Search Criteria
                    this.mUIItemProgressBar.WindowTitles.Add("All Employee Login");
                    #endregion
                }
                return this.mUIItemProgressBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfProgressBar mUIItemProgressBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICafochaWindow : WinWindow
    {
        
        public UICafochaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Cafocha";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Cafocha");
            this.WindowTitles.Add("bin");
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Cafocha");
            #endregion
        }
        
        #region Properties
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("Cafocha");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Cafocha");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UICafochaListItem UICafochaListItem
        {
            get
            {
                if ((this.mUICafochaListItem == null))
                {
                    this.mUICafochaListItem = new UICafochaListItem(this);
                }
                return this.mUICafochaListItem;
            }
        }
        #endregion
        
        #region Fields
        private UICafochaListItem mUICafochaListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICafochaListItem : WinListItem
    {
        
        public UICafochaListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Cafocha";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMainWindowTitleBar.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMainWindowTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPrintPreviewWindow : WpfWindow
    {
        
        public UIPrintPreviewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Print Preview";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Print Preview");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIKbInputCustom UIKbInputCustom
        {
            get
            {
                if ((this.mUIKbInputCustom == null))
                {
                    this.mUIKbInputCustom = new UIKbInputCustom(this);
                }
                return this.mUIKbInputCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIKbInputCustom mUIKbInputCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIKbInputCustom : WpfCustom
    {
        
        public UIKbInputCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.KeyboardControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "KbInput";
            #endregion
        }
        
        #region Properties
        public WpfButton UIBtnGoButton
        {
            get
            {
                if ((this.mUIBtnGoButton == null))
                {
                    this.mUIBtnGoButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBtnGoButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnGo";
                    #endregion
                }
                return this.mUIBtnGoButton;
            }
        }
        
        public WpfEdit UITxtInputValueEdit
        {
            get
            {
                if ((this.mUITxtInputValueEdit == null))
                {
                    this.mUITxtInputValueEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtInputValueEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TxtInputValue";
                    #endregion
                }
                return this.mUITxtInputValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBtnGoButton;
        
        private WpfEdit mUITxtInputValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAllpaymentgrounduptoWindow : WinWindow
    {
        
        public UIAllpaymentgrounduptoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "All payment ground up to higher number!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("All payment ground up to higher number!");
            #endregion
        }
        
        #region Properties
        public WinText UIAllpaymentgrounduptoText
        {
            get
            {
                if ((this.mUIAllpaymentgrounduptoText == null))
                {
                    this.mUIAllpaymentgrounduptoText = new WinText(this);
                    #region Search Criteria
                    this.mUIAllpaymentgrounduptoText.SearchProperties[WinText.PropertyNames.Name] = "All payment ground up to higher number!";
                    this.mUIAllpaymentgrounduptoText.WindowTitles.Add("All payment ground up to higher number!");
                    #endregion
                }
                return this.mUIAllpaymentgrounduptoText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIAllpaymentgrounduptoText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdminNavWindowWindow : WpfWindow
    {
        
        public UIAdminNavWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "AdminNavWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AdminNavWindow");
            #endregion
        }
        
        #region Properties
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemPane : WpfPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("AdminNavWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIGotoAdminWSButtonButton
        {
            get
            {
                if ((this.mUIGotoAdminWSButtonButton == null))
                {
                    this.mUIGotoAdminWSButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGotoAdminWSButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GotoAdminWSButton";
                    this.mUIGotoAdminWSButtonButton.WindowTitles.Add("AdminNavWindow");
                    #endregion
                }
                return this.mUIGotoAdminWSButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIGotoAdminWSButtonButton;
        #endregion
    }
}
