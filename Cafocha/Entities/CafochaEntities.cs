

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Cafocha\App.config"
//     Connection String Name: "SqlLocalConnectionString"
//     Connection String:      "data source=(LocalDB)\MSSQLLocalDB;attachdbfilename=D:\Projects\Cafeteria-POS\Cafocha\DB\DBCafocha.mdf;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 14.0.1000.169

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Cafocha.Entities
{
    using System.Linq;

    #region Unit of work

    public partial interface ILocalContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AdminRe> AdminRes { get; set; } // AdminRes
        System.Data.Entity.DbSet<ApWareHouse> ApWareHouses { get; set; } // APWareHouse
        System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee
        System.Data.Entity.DbSet<OrderNote> OrderNotes { get; set; } // OrderNote
        System.Data.Entity.DbSet<OrderNoteDetail> OrderNoteDetails { get; set; } // OrderNoteDetails
        System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        System.Data.Entity.DbSet<ProductDetail> ProductDetails { get; set; } // ProductDetails
        System.Data.Entity.DbSet<SalaryNote> SalaryNotes { get; set; } // SalaryNote
        System.Data.Entity.DbSet<Stock> Stocks { get; set; } // Stock
        System.Data.Entity.DbSet<StockIn> StockIns { get; set; } // StockIn
        System.Data.Entity.DbSet<StockInDetail> StockInDetails { get; set; } // StockInDetails
        System.Data.Entity.DbSet<StockOut> StockOuts { get; set; } // StockOut
        System.Data.Entity.DbSet<StockOutDetail> StockOutDetails { get; set; } // StockOutDetails
        System.Data.Entity.DbSet<StockType> StockTypes { get; set; } // StockType
        System.Data.Entity.DbSet<WorkingHistory> WorkingHistories { get; set; } // WorkingHistory

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class LocalContext : System.Data.Entity.DbContext, ILocalContext
    {
        public System.Data.Entity.DbSet<AdminRe> AdminRes { get; set; } // AdminRes
        public System.Data.Entity.DbSet<ApWareHouse> ApWareHouses { get; set; } // APWareHouse
        public System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee
        public System.Data.Entity.DbSet<OrderNote> OrderNotes { get; set; } // OrderNote
        public System.Data.Entity.DbSet<OrderNoteDetail> OrderNoteDetails { get; set; } // OrderNoteDetails
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        public System.Data.Entity.DbSet<ProductDetail> ProductDetails { get; set; } // ProductDetails
        public System.Data.Entity.DbSet<SalaryNote> SalaryNotes { get; set; } // SalaryNote
        public System.Data.Entity.DbSet<Stock> Stocks { get; set; } // Stock
        public System.Data.Entity.DbSet<StockIn> StockIns { get; set; } // StockIn
        public System.Data.Entity.DbSet<StockInDetail> StockInDetails { get; set; } // StockInDetails
        public System.Data.Entity.DbSet<StockOut> StockOuts { get; set; } // StockOut
        public System.Data.Entity.DbSet<StockOutDetail> StockOutDetails { get; set; } // StockOutDetails
        public System.Data.Entity.DbSet<StockType> StockTypes { get; set; } // StockType
        public System.Data.Entity.DbSet<WorkingHistory> WorkingHistories { get; set; } // WorkingHistory

        static LocalContext()
        {
            System.Data.Entity.Database.SetInitializer<LocalContext>(null);
        }

        public LocalContext()
            : base("Name=SqlLocalConnectionString")
        {
            InitializePartial();
        }

        public LocalContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public LocalContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public LocalContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public LocalContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AdminReMapping());
            modelBuilder.Configurations.Add(new ApWareHouseMapping());
            modelBuilder.Configurations.Add(new CustomerMapping());
            modelBuilder.Configurations.Add(new EmployeeMapping());
            modelBuilder.Configurations.Add(new OrderNoteMapping());
            modelBuilder.Configurations.Add(new OrderNoteDetailMapping());
            modelBuilder.Configurations.Add(new ProductMapping());
            modelBuilder.Configurations.Add(new ProductDetailMapping());
            modelBuilder.Configurations.Add(new SalaryNoteMapping());
            modelBuilder.Configurations.Add(new StockMapping());
            modelBuilder.Configurations.Add(new StockInMapping());
            modelBuilder.Configurations.Add(new StockInDetailMapping());
            modelBuilder.Configurations.Add(new StockOutMapping());
            modelBuilder.Configurations.Add(new StockOutDetailMapping());
            modelBuilder.Configurations.Add(new StockTypeMapping());
            modelBuilder.Configurations.Add(new WorkingHistoryMapping());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AdminReMapping(schema));
            modelBuilder.Configurations.Add(new ApWareHouseMapping(schema));
            modelBuilder.Configurations.Add(new CustomerMapping(schema));
            modelBuilder.Configurations.Add(new EmployeeMapping(schema));
            modelBuilder.Configurations.Add(new OrderNoteMapping(schema));
            modelBuilder.Configurations.Add(new OrderNoteDetailMapping(schema));
            modelBuilder.Configurations.Add(new ProductMapping(schema));
            modelBuilder.Configurations.Add(new ProductDetailMapping(schema));
            modelBuilder.Configurations.Add(new SalaryNoteMapping(schema));
            modelBuilder.Configurations.Add(new StockMapping(schema));
            modelBuilder.Configurations.Add(new StockInMapping(schema));
            modelBuilder.Configurations.Add(new StockInDetailMapping(schema));
            modelBuilder.Configurations.Add(new StockOutMapping(schema));
            modelBuilder.Configurations.Add(new StockOutDetailMapping(schema));
            modelBuilder.Configurations.Add(new StockTypeMapping(schema));
            modelBuilder.Configurations.Add(new WorkingHistoryMapping(schema));
            OnCreateModelPartial(modelBuilder, schema);
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
		static partial void OnCreateModelPartial(System.Data.Entity.DbModelBuilder modelBuilder, string schema);        
    }
    #endregion

    #region Database context factory

    public partial class LocalContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<LocalContext>
    {
        public LocalContext Create()
        {
            return new LocalContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeLocalContext : ILocalContext
    {
        public System.Data.Entity.DbSet<AdminRe> AdminRes { get; set; }
        public System.Data.Entity.DbSet<ApWareHouse> ApWareHouses { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<OrderNote> OrderNotes { get; set; }
        public System.Data.Entity.DbSet<OrderNoteDetail> OrderNoteDetails { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<ProductDetail> ProductDetails { get; set; }
        public System.Data.Entity.DbSet<SalaryNote> SalaryNotes { get; set; }
        public System.Data.Entity.DbSet<Stock> Stocks { get; set; }
        public System.Data.Entity.DbSet<StockIn> StockIns { get; set; }
        public System.Data.Entity.DbSet<StockInDetail> StockInDetails { get; set; }
        public System.Data.Entity.DbSet<StockOut> StockOuts { get; set; }
        public System.Data.Entity.DbSet<StockOutDetail> StockOutDetails { get; set; }
        public System.Data.Entity.DbSet<StockType> StockTypes { get; set; }
        public System.Data.Entity.DbSet<WorkingHistory> WorkingHistories { get; set; }

        public FakeLocalContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AdminRes = new FakeDbSet<AdminRe>("AdId");
            ApWareHouses = new FakeDbSet<ApWareHouse>("ApwarehouseId");
            Customers = new FakeDbSet<Customer>("CusId");
            Employees = new FakeDbSet<Employee>("EmpId");
            OrderNotes = new FakeDbSet<OrderNote>("OrdernoteId");
            OrderNoteDetails = new FakeDbSet<OrderNoteDetail>("OrdernoteId", "ProductId");
            Products = new FakeDbSet<Product>("ProductId");
            ProductDetails = new FakeDbSet<ProductDetail>("PdetailId");
            SalaryNotes = new FakeDbSet<SalaryNote>("SnId");
            Stocks = new FakeDbSet<Stock>("StoId");
            StockIns = new FakeDbSet<StockIn>("SiId");
            StockInDetails = new FakeDbSet<StockInDetail>("SiId", "StoId");
            StockOuts = new FakeDbSet<StockOut>("StockoutId");
            StockOutDetails = new FakeDbSet<StockOutDetail>("StockoutId", "StockId");
            StockTypes = new FakeDbSet<StockType>("StId");
            WorkingHistories = new FakeDbSet<WorkingHistory>("WhId");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AdminRes
    [Table("AdminRes", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class AdminRe
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ad_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.AdminRes", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Ad ID")]
        public string AdId { get; set; } // ad_id (Primary key) (length: 10)

        [Column(@"username", Order = 2, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [DataType(DataType.Text)]
        [Display(Name = "Username")]
        public string Username { get; set; } // username (length: 50)

        [Column(@"pass", Order = 3, TypeName = "varchar(max)")]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Pass")]
        public string Pass { get; set; } // pass

        [Column(@"name", Order = 4, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 50)

        [Column(@"ad_role", Order = 5, TypeName = "int")]
        [Required]
        [Display(Name = "Ad role")]
        public int AdRole { get; set; } // ad_role

        // Reverse navigation

        /// <summary>
        /// Child Employees where [Employee].[manager] point to this entity (FK_dbo.Employee_dbo.AdminRes_manager)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // Employee.FK_dbo.Employee_dbo.AdminRes_manager
        /// <summary>
        /// Child StockIns where [StockIn].[ad_id] point to this entity (FK_dbo.StockIn_dbo.AdminRes_ad_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StockIn> StockIns { get; set; } // StockIn.FK_dbo.StockIn_dbo.AdminRes_ad_id
        /// <summary>
        /// Child StockOuts where [StockOut].[ad_id] point to this entity (FK_dbo.StockOut_dbo.AdminRes_ad_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StockOut> StockOuts { get; set; } // StockOut.FK_dbo.StockOut_dbo.AdminRes_ad_id

        public AdminRe()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            StockIns = new System.Collections.Generic.List<StockIn>();
            StockOuts = new System.Collections.Generic.List<StockOut>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // APWareHouse
    [Table("APWareHouse", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class ApWareHouse
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"apwarehouse_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.APWareHouse", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Apwarehouse ID")]
        public string ApwarehouseId { get; set; } // apwarehouse_id (Primary key) (length: 10)

        [Column(@"name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 500)

        [Column(@"contain", Order = 3, TypeName = "float")]
        [Display(Name = "Contain")]
        public double? Contain { get; set; } // contain

        [Column(@"std_contain", Order = 4, TypeName = "float")]
        [Required]
        [Display(Name = "Std contain")]
        public double StdContain { get; set; } // std_contain

        // Reverse navigation

        /// <summary>
        /// Child Stocks where [Stock].[apwarehouse_id] point to this entity (FK_dbo.Stock_dbo.APWareHouse_apwarehouse_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Stock> Stocks { get; set; } // Stock.FK_dbo.Stock_dbo.APWareHouse_apwarehouse_id

        public ApWareHouse()
        {
            Stocks = new System.Collections.Generic.List<Stock>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Customer
    [Table("Customer", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Customer
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"cus_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.Customer", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Cus ID")]
        public string CusId { get; set; } // cus_id (Primary key) (length: 10)

        [Column(@"name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 50)

        [Column(@"phone", Order = 3, TypeName = "varchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Phone]
        [Display(Name = "Phone")]
        public string Phone { get; set; } // phone (length: 20)

        [Column(@"email", Order = 4, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // email (length: 100)

        [Column(@"discount", Order = 5, TypeName = "int")]
        [Required]
        [Display(Name = "Discount")]
        public int Discount { get; set; } // discount

        [Column(@"deleted", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Deleted")]
        public int Deleted { get; set; } // deleted

        // Reverse navigation

        /// <summary>
        /// Child OrderNotes where [OrderNote].[cus_id] point to this entity (FK_dbo.OrderNote_dbo.Customer_cus_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OrderNote> OrderNotes { get; set; } // OrderNote.FK_dbo.OrderNote_dbo.Customer_cus_id

        public Customer()
        {
            OrderNotes = new System.Collections.Generic.List<OrderNote>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Employee
    [Table("Employee", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Employee
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"emp_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.Employee", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Emp ID")]
        public string EmpId { get; set; } // emp_id (Primary key) (length: 10)

        [Column(@"emp_code", Order = 2, TypeName = "varchar(max)")]
        [Display(Name = "Emp code")]
        public string EmpCode { get; set; } // emp_code

        [Column(@"manager", Order = 3, TypeName = "varchar")]
        [Index(@"IX_manager", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Manager")]
        public string Manager { get; set; } // manager (length: 10)

        [Column(@"username", Order = 4, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [DataType(DataType.Text)]
        [Display(Name = "Username")]
        public string Username { get; set; } // username (length: 50)

        [Column(@"pass", Order = 5, TypeName = "varchar(max)")]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Pass")]
        public string Pass { get; set; } // pass

        [Column(@"name", Order = 6, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 50)

        [Column(@"birth", Order = 7, TypeName = "date")]
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Birth")]
        public System.DateTime Birth { get; set; } // birth

        [Column(@"startday", Order = 8, TypeName = "date")]
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Startday")]
        public System.DateTime Startday { get; set; } // startday

        [Column(@"hour_wage", Order = 9, TypeName = "int")]
        [Required]
        [Display(Name = "Hour wage")]
        public int HourWage { get; set; } // hour_wage

        [Column(@"addr", Order = 10, TypeName = "nvarchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Addr")]
        public string Addr { get; set; } // addr (length: 200)

        [Column(@"email", Order = 11, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // email (length: 100)

        [Column(@"phone", Order = 12, TypeName = "varchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Phone]
        [Display(Name = "Phone")]
        public string Phone { get; set; } // phone (length: 20)

        [Column(@"emp_role", Order = 13, TypeName = "int")]
        [Required]
        [Display(Name = "Emp role")]
        public int EmpRole { get; set; } // emp_role

        [Column(@"deleted", Order = 14, TypeName = "int")]
        [Required]
        [Display(Name = "Deleted")]
        public int Deleted { get; set; } // deleted

        // Reverse navigation

        /// <summary>
        /// Child OrderNotes where [OrderNote].[emp_id] point to this entity (FK_dbo.OrderNote_dbo.Employee_emp_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OrderNote> OrderNotes { get; set; } // OrderNote.FK_dbo.OrderNote_dbo.Employee_emp_id
        /// <summary>
        /// Child SalaryNotes where [SalaryNote].[emp_id] point to this entity (FK_dbo.SalaryNote_dbo.Employee_emp_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalaryNote> SalaryNotes { get; set; } // SalaryNote.FK_dbo.SalaryNote_dbo.Employee_emp_id
        /// <summary>
        /// Child WorkingHistories where [WorkingHistory].[emp_id] point to this entity (FK_dbo.WorkingHistory_dbo.Employee_emp_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<WorkingHistory> WorkingHistories { get; set; } // WorkingHistory.FK_dbo.WorkingHistory_dbo.Employee_emp_id

        // Foreign keys

        /// <summary>
        /// Parent AdminRe pointed by [Employee].([Manager]) (FK_dbo.Employee_dbo.AdminRes_manager)
        /// </summary>
        [ForeignKey("Manager"), Required] public virtual AdminRe AdminRe { get; set; } // FK_dbo.Employee_dbo.AdminRes_manager

        public Employee()
        {
            OrderNotes = new System.Collections.Generic.List<OrderNote>();
            SalaryNotes = new System.Collections.Generic.List<SalaryNote>();
            WorkingHistories = new System.Collections.Generic.List<WorkingHistory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OrderNote
    [Table("OrderNote", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class OrderNote
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ordernote_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.OrderNote", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Ordernote ID")]
        public string OrdernoteId { get; set; } // ordernote_id (Primary key) (length: 10)

        [Column(@"pay_method", Order = 2, TypeName = "int")]
        [Required]
        [Display(Name = "Pay method")]
        public int PayMethod { get; set; } // pay_method

        [Column(@"sale_value", Order = 3, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sale value")]
        public decimal SaleValue { get; set; } // sale_value

        [Column(@"total_price_non_disc", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Total price non disc")]
        public decimal TotalPriceNonDisc { get; set; } // total_price_non_disc

        [Column(@"Vat", Order = 5, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Vat")]
        public decimal Vat { get; set; } // Vat

        [Column(@"discount", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Discount")]
        public int Discount { get; set; } // discount

        [Column(@"cus_id", Order = 7, TypeName = "varchar")]
        [Index(@"IX_cus_id", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Cus ID")]
        public string CusId { get; set; } // cus_id (length: 10)

        [Column(@"emp_id", Order = 8, TypeName = "varchar")]
        [Index(@"IX_emp_id", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Emp ID")]
        public string EmpId { get; set; } // emp_id (length: 10)

        [Column(@"order_time", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Order time")]
        public System.DateTime OrderTime { get; set; } // order_time

        [Column(@"total_price", Order = 10, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Total price")]
        public decimal TotalPrice { get; set; } // total_price

        [Column(@"customer_pay", Order = 11, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Customer pay")]
        public decimal CustomerPay { get; set; } // customer_pay

        [Column(@"pay_back", Order = 12, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Pay back")]
        public decimal PayBack { get; set; } // pay_back

        // Reverse navigation

        /// <summary>
        /// Child OrderNoteDetails where [OrderNoteDetails].[ordernote_id] point to this entity (FK_dbo.OrderNoteDetails_dbo.OrderNote_ordernote_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OrderNoteDetail> OrderNoteDetails { get; set; } // OrderNoteDetails.FK_dbo.OrderNoteDetails_dbo.OrderNote_ordernote_id

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [OrderNote].([CusId]) (FK_dbo.OrderNote_dbo.Customer_cus_id)
        /// </summary>
        [ForeignKey("CusId")] public virtual Customer Customer { get; set; } // FK_dbo.OrderNote_dbo.Customer_cus_id

        /// <summary>
        /// Parent Employee pointed by [OrderNote].([EmpId]) (FK_dbo.OrderNote_dbo.Employee_emp_id)
        /// </summary>
        [ForeignKey("EmpId")] public virtual Employee Employee { get; set; } // FK_dbo.OrderNote_dbo.Employee_emp_id

        public OrderNote()
        {
            OrderNoteDetails = new System.Collections.Generic.List<OrderNoteDetail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OrderNoteDetails
    [Table("OrderNoteDetails", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class OrderNoteDetail
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ordernote_id", Order = 1, TypeName = "varchar")]
        [Index(@"IX_ordernote_id", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_dbo.OrderNoteDetails", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Ordernote ID")]
        public string OrdernoteId { get; set; } // ordernote_id (Primary key) (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"product_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_product_id", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_dbo.OrderNoteDetails", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Product ID")]
        public string ProductId { get; set; } // product_id (Primary key) (length: 10)

        [Column(@"discount", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Discount")]
        public int Discount { get; set; } // discount

        [Column(@"quan", Order = 4, TypeName = "int")]
        [Required]
        [Display(Name = "Quan")]
        public int Quan { get; set; } // quan

        // Foreign keys

        /// <summary>
        /// Parent OrderNote pointed by [OrderNoteDetails].([OrdernoteId]) (FK_dbo.OrderNoteDetails_dbo.OrderNote_ordernote_id)
        /// </summary>
        [ForeignKey("OrdernoteId"), Required] public virtual OrderNote OrderNote { get; set; } // FK_dbo.OrderNoteDetails_dbo.OrderNote_ordernote_id

        /// <summary>
        /// Parent Product pointed by [OrderNoteDetails].([ProductId]) (FK_dbo.OrderNoteDetails_dbo.Product_product_id)
        /// </summary>
        [ForeignKey("ProductId"), Required] public virtual Product Product { get; set; } // FK_dbo.OrderNoteDetails_dbo.Product_product_id

        public OrderNoteDetail()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Product
    [Table("Product", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Product
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"product_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.Product", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Product ID")]
        public string ProductId { get; set; } // product_id (Primary key) (length: 10)

        [Column(@"name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 50)

        [Column(@"info", Order = 3, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Info")]
        public string Info { get; set; } // info (length: 100)

        [Column(@"price", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Price")]
        public decimal Price { get; set; } // price

        [Column(@"type", Order = 5, TypeName = "int")]
        [Required]
        [Display(Name = "Type")]
        public int Type { get; set; } // type

        [Column(@"deleted", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Deleted")]
        public int Deleted { get; set; } // deleted

        [Column(@"image_link", Order = 7, TypeName = "nvarchar(max)")]
        [Display(Name = "Image link")]
        public string ImageLink { get; set; } // image_link

        [Column(@"Discount", Order = 8, TypeName = "int")]
        [Required]
        [Display(Name = "Discount")]
        public int Discount { get; set; } // Discount

        // Reverse navigation

        /// <summary>
        /// Child OrderNoteDetails where [OrderNoteDetails].[product_id] point to this entity (FK_dbo.OrderNoteDetails_dbo.Product_product_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OrderNoteDetail> OrderNoteDetails { get; set; } // OrderNoteDetails.FK_dbo.OrderNoteDetails_dbo.Product_product_id
        /// <summary>
        /// Child ProductDetails where [ProductDetails].[product_id] point to this entity (FK_dbo.ProductDetails_dbo.Product_product_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProductDetail> ProductDetails { get; set; } // ProductDetails.FK_dbo.ProductDetails_dbo.Product_product_id

        public Product()
        {
            OrderNoteDetails = new System.Collections.Generic.List<OrderNoteDetail>();
            ProductDetails = new System.Collections.Generic.List<ProductDetail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductDetails
    [Table("ProductDetails", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class ProductDetail
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"pdetail_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.ProductDetails", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Pdetail ID")]
        public string PdetailId { get; set; } // pdetail_id (Primary key) (length: 10)

        [Column(@"product_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_product_id", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Product ID")]
        public string ProductId { get; set; } // product_id (length: 10)

        [Column(@"igd_id", Order = 3, TypeName = "varchar")]
        [Index(@"IX_igd_id", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Igd ID")]
        public string IgdId { get; set; } // igd_id (length: 10)

        [Column(@"quan", Order = 4, TypeName = "float")]
        [Required]
        [Display(Name = "Quan")]
        public double Quan { get; set; } // quan

        [Column(@"unit_use", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Unit use")]
        public string UnitUse { get; set; } // unit_use (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent Product pointed by [ProductDetails].([ProductId]) (FK_dbo.ProductDetails_dbo.Product_product_id)
        /// </summary>
        [ForeignKey("ProductId"), Required] public virtual Product Product { get; set; } // FK_dbo.ProductDetails_dbo.Product_product_id

        public ProductDetail()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalaryNote
    [Table("SalaryNote", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class SalaryNote
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"sn_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.SalaryNote", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Sn ID")]
        public string SnId { get; set; } // sn_id (Primary key) (length: 10)

        [Column(@"emp_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_emp_id", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Emp ID")]
        public string EmpId { get; set; } // emp_id (length: 10)

        [Column(@"date_pay", Order = 3, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Date pay")]
        public System.DateTime? DatePay { get; set; } // date_pay

        [Column(@"salary_value", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Salary value")]
        public decimal SalaryValue { get; set; } // salary_value

        [Column(@"work_hour", Order = 5, TypeName = "float")]
        [Required]
        [Display(Name = "Work hour")]
        public double WorkHour { get; set; } // work_hour

        [Column(@"for_month", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "For month")]
        public int ForMonth { get; set; } // for_month

        [Column(@"for_year", Order = 7, TypeName = "int")]
        [Required]
        [Display(Name = "For year")]
        public int ForYear { get; set; } // for_year

        [Column(@"is_paid", Order = 8, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Is paid")]
        public byte IsPaid { get; set; } // is_paid

        // Reverse navigation

        /// <summary>
        /// Child WorkingHistories where [WorkingHistory].[result_salary] point to this entity (FK_dbo.WorkingHistory_dbo.SalaryNote_result_salary)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<WorkingHistory> WorkingHistories { get; set; } // WorkingHistory.FK_dbo.WorkingHistory_dbo.SalaryNote_result_salary

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [SalaryNote].([EmpId]) (FK_dbo.SalaryNote_dbo.Employee_emp_id)
        /// </summary>
        [ForeignKey("EmpId"), Required] public virtual Employee Employee { get; set; } // FK_dbo.SalaryNote_dbo.Employee_emp_id

        public SalaryNote()
        {
            WorkingHistories = new System.Collections.Generic.List<WorkingHistory>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Stock
    [Table("Stock", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Stock
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"sto_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.Stock", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Sto ID")]
        public string StoId { get; set; } // sto_id (Primary key) (length: 10)

        [Column(@"apwarehouse_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_apwarehouse_id", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Apwarehouse ID")]
        public string ApwarehouseId { get; set; } // apwarehouse_id (length: 10)

        [Column(@"name", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 100)

        [Column(@"st_id", Order = 4, TypeName = "varchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "St ID")]
        public string StId { get; set; } // st_id (length: 10)

        [Column(@"unit", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Unit")]
        public string Unit { get; set; } // unit (length: 100)

        [Column(@"standard_price", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Standard price")]
        public decimal StandardPrice { get; set; } // standard_price

        [Column(@"info", Order = 7, TypeName = "nvarchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Info")]
        public string Info { get; set; } // info (length: 500)

        [Column(@"supplier", Order = 8, TypeName = "nvarchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Supplier")]
        public string Supplier { get; set; } // supplier (length: 500)

        [Column(@"deleted", Order = 9, TypeName = "int")]
        [Required]
        [Display(Name = "Deleted")]
        public int Deleted { get; set; } // deleted

        // Reverse navigation

        /// <summary>
        /// Child StockInDetails where [StockInDetails].[sto_id] point to this entity (FK_dbo.StockInDetails_dbo.Stock_sto_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StockInDetail> StockInDetails { get; set; } // StockInDetails.FK_dbo.StockInDetails_dbo.Stock_sto_id
        /// <summary>
        /// Child StockOutDetails where [StockOutDetails].[stock_id] point to this entity (FK_dbo.StockOutDetails_dbo.Stock_stock_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StockOutDetail> StockOutDetails { get; set; } // StockOutDetails.FK_dbo.StockOutDetails_dbo.Stock_stock_id

        // Foreign keys

        /// <summary>
        /// Parent ApWareHouse pointed by [Stock].([ApwarehouseId]) (FK_dbo.Stock_dbo.APWareHouse_apwarehouse_id)
        /// </summary>
        [ForeignKey("ApwarehouseId"), Required] public virtual ApWareHouse ApWareHouse { get; set; } // FK_dbo.Stock_dbo.APWareHouse_apwarehouse_id

        /// <summary>
        /// Parent StockType pointed by [Stock].([StId]) (FK_dbo.Stock_dbo.StockType_st_id)
        /// </summary>
        [ForeignKey("StId")] public virtual StockType StockType { get; set; } // FK_dbo.Stock_dbo.StockType_st_id

        public Stock()
        {
            StockInDetails = new System.Collections.Generic.List<StockInDetail>();
            StockOutDetails = new System.Collections.Generic.List<StockOutDetail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // StockIn
    [Table("StockIn", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class StockIn
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"si_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.StockIn", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Si ID")]
        public string SiId { get; set; } // si_id (Primary key) (length: 10)

        [Column(@"ad_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_ad_id", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Ad ID")]
        public string AdId { get; set; } // ad_id (length: 10)

        [Column(@"intime", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Intime")]
        public System.DateTime Intime { get; set; } // intime

        [Column(@"total_amount", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Total amount")]
        public decimal TotalAmount { get; set; } // total_amount

        // Reverse navigation

        /// <summary>
        /// Child StockInDetails where [StockInDetails].[si_id] point to this entity (FK_dbo.StockInDetails_dbo.StockIn_si_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StockInDetail> StockInDetails { get; set; } // StockInDetails.FK_dbo.StockInDetails_dbo.StockIn_si_id

        // Foreign keys

        /// <summary>
        /// Parent AdminRe pointed by [StockIn].([AdId]) (FK_dbo.StockIn_dbo.AdminRes_ad_id)
        /// </summary>
        [ForeignKey("AdId")] public virtual AdminRe AdminRe { get; set; } // FK_dbo.StockIn_dbo.AdminRes_ad_id

        public StockIn()
        {
            StockInDetails = new System.Collections.Generic.List<StockInDetail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // StockInDetails
    [Table("StockInDetails", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class StockInDetail
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"si_id", Order = 1, TypeName = "varchar")]
        [Index(@"IX_si_id", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_dbo.StockInDetails", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Si ID")]
        public string SiId { get; set; } // si_id (Primary key) (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"sto_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_sto_id", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_dbo.StockInDetails", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Sto ID")]
        public string StoId { get; set; } // sto_id (Primary key) (length: 10)

        [Column(@"quan", Order = 3, TypeName = "float")]
        [Required]
        [Display(Name = "Quan")]
        public double Quan { get; set; } // quan

        [Column(@"item_price", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Item price")]
        public decimal ItemPrice { get; set; } // item_price

        [Column(@"note", Order = 5, TypeName = "nvarchar")]
        [MaxLength(1000)]
        [StringLength(1000)]
        [Display(Name = "Note")]
        public string Note { get; set; } // note (length: 1000)

        // Foreign keys

        /// <summary>
        /// Parent StockIn pointed by [StockInDetails].([SiId]) (FK_dbo.StockInDetails_dbo.StockIn_si_id)
        /// </summary>
        [ForeignKey("SiId"), Required] public virtual StockIn StockIn { get; set; } // FK_dbo.StockInDetails_dbo.StockIn_si_id

        /// <summary>
        /// Parent Stock pointed by [StockInDetails].([StoId]) (FK_dbo.StockInDetails_dbo.Stock_sto_id)
        /// </summary>
        [ForeignKey("StoId"), Required] public virtual Stock Stock { get; set; } // FK_dbo.StockInDetails_dbo.Stock_sto_id

        public StockInDetail()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // StockOut
    [Table("StockOut", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class StockOut
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"stockout_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.StockOut", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Stockout ID")]
        public string StockoutId { get; set; } // stockout_id (Primary key) (length: 10)

        [Column(@"ad_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_ad_id", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Ad ID")]
        public string AdId { get; set; } // ad_id (length: 10)

        [Column(@"outTime", Order = 3, TypeName = "date")]
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Out time")]
        public System.DateTime OutTime { get; set; } // outTime

        [Column(@"Vat", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Vat")]
        public decimal Vat { get; set; } // Vat

        [Column(@"discount", Order = 5, TypeName = "int")]
        [Required]
        [Display(Name = "Discount")]
        public int Discount { get; set; } // discount

        [Column(@"total_amount", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Total amount")]
        public decimal TotalAmount { get; set; } // total_amount

        // Reverse navigation

        /// <summary>
        /// Child StockOutDetails where [StockOutDetails].[stockout_id] point to this entity (FK_dbo.StockOutDetails_dbo.StockOut_stockout_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StockOutDetail> StockOutDetails { get; set; } // StockOutDetails.FK_dbo.StockOutDetails_dbo.StockOut_stockout_id

        // Foreign keys

        /// <summary>
        /// Parent AdminRe pointed by [StockOut].([AdId]) (FK_dbo.StockOut_dbo.AdminRes_ad_id)
        /// </summary>
        [ForeignKey("AdId")] public virtual AdminRe AdminRe { get; set; } // FK_dbo.StockOut_dbo.AdminRes_ad_id

        public StockOut()
        {
            StockOutDetails = new System.Collections.Generic.List<StockOutDetail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // StockOutDetails
    [Table("StockOutDetails", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class StockOutDetail
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"stockout_id", Order = 1, TypeName = "varchar")]
        [Index(@"IX_stockout_id", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_dbo.StockOutDetails", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Stockout ID")]
        public string StockoutId { get; set; } // stockout_id (Primary key) (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"stock_id", Order = 2, TypeName = "varchar")]
        [Index(@"IX_stock_id", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_dbo.StockOutDetails", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Stock ID")]
        public string StockId { get; set; } // stock_id (Primary key) (length: 10)

        [Column(@"discount", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Discount")]
        public int Discount { get; set; } // discount

        [Column(@"quan", Order = 4, TypeName = "int")]
        [Required]
        [Display(Name = "Quan")]
        public int Quan { get; set; } // quan

        // Foreign keys

        /// <summary>
        /// Parent Stock pointed by [StockOutDetails].([StockId]) (FK_dbo.StockOutDetails_dbo.Stock_stock_id)
        /// </summary>
        [ForeignKey("StockId"), Required] public virtual Stock Stock { get; set; } // FK_dbo.StockOutDetails_dbo.Stock_stock_id

        /// <summary>
        /// Parent StockOut pointed by [StockOutDetails].([StockoutId]) (FK_dbo.StockOutDetails_dbo.StockOut_stockout_id)
        /// </summary>
        [ForeignKey("StockoutId"), Required] public virtual StockOut StockOut { get; set; } // FK_dbo.StockOutDetails_dbo.StockOut_stockout_id

        public StockOutDetail()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // StockType
    [Table("StockType", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class StockType
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"st_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK__StockTyp__A85E81CF82CF7F6F", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "St ID")]
        public string StId { get; set; } // st_id (Primary key) (length: 10)

        [Column(@"name", Order = 2, TypeName = "nvarchar(max)")]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name

        [Column(@"deleted", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Deleted")]
        public int Deleted { get; set; } // deleted

        // Reverse navigation

        /// <summary>
        /// Child Stocks where [Stock].[st_id] point to this entity (FK_dbo.Stock_dbo.StockType_st_id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Stock> Stocks { get; set; } // Stock.FK_dbo.Stock_dbo.StockType_st_id

        public StockType()
        {
            Stocks = new System.Collections.Generic.List<Stock>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // WorkingHistory
    [Table("WorkingHistory", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class WorkingHistory
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"wh_id", Order = 1, TypeName = "varchar")]
        [Index(@"PK_dbo.WorkingHistory", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Key]
        [Display(Name = "Wh ID")]
        public string WhId { get; set; } // wh_id (Primary key) (length: 10)

        [Column(@"result_salary", Order = 2, TypeName = "varchar")]
        [Index(@"IX_result_salary", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Result salary")]
        public string ResultSalary { get; set; } // result_salary (length: 10)

        [Column(@"emp_id", Order = 3, TypeName = "varchar")]
        [Index(@"IX_emp_id", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Emp ID")]
        public string EmpId { get; set; } // emp_id (length: 10)

        [Column(@"startTime", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start time")]
        public System.DateTime StartTime { get; set; } // startTime

        [Column(@"endTime", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "End time")]
        public System.DateTime EndTime { get; set; } // endTime

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [WorkingHistory].([EmpId]) (FK_dbo.WorkingHistory_dbo.Employee_emp_id)
        /// </summary>
        [ForeignKey("EmpId")] public virtual Employee Employee { get; set; } // FK_dbo.WorkingHistory_dbo.Employee_emp_id

        /// <summary>
        /// Parent SalaryNote pointed by [WorkingHistory].([ResultSalary]) (FK_dbo.WorkingHistory_dbo.SalaryNote_result_salary)
        /// </summary>
        [ForeignKey("ResultSalary")] public virtual SalaryNote SalaryNote { get; set; } // FK_dbo.WorkingHistory_dbo.SalaryNote_result_salary

        public WorkingHistory()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // AdminRes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdminReMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdminRe>
    {
        public AdminReMapping()
            : this("dbo")
        {
        }

        public AdminReMapping(string schema)
        {
            Property(x => x.AdId).IsUnicode(false);
            Property(x => x.Username).IsUnicode(false);
            Property(x => x.Pass).IsUnicode(false);
            Property(x => x.Name).IsUnicode(false);
        }
    }

    // APWareHouse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ApWareHouseMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ApWareHouse>
    {
        public ApWareHouseMapping()
            : this("dbo")
        {
        }

        public ApWareHouseMapping(string schema)
        {
            Property(x => x.ApwarehouseId).IsUnicode(false);
            Property(x => x.Contain).IsOptional();
        }
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CustomerMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Customer>
    {
        public CustomerMapping()
            : this("dbo")
        {
        }

        public CustomerMapping(string schema)
        {
            Property(x => x.CusId).IsUnicode(false);
            Property(x => x.Phone).IsOptional().IsUnicode(false);
            Property(x => x.Email).IsOptional().IsUnicode(false);
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmployeeMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeMapping()
            : this("dbo")
        {
        }

        public EmployeeMapping(string schema)
        {
            Property(x => x.EmpId).IsUnicode(false);
            Property(x => x.EmpCode).IsOptional().IsUnicode(false);
            Property(x => x.Manager).IsUnicode(false);
            Property(x => x.Username).IsUnicode(false);
            Property(x => x.Pass).IsUnicode(false);
            Property(x => x.Addr).IsOptional();
            Property(x => x.Email).IsOptional().IsUnicode(false);
            Property(x => x.Phone).IsOptional().IsUnicode(false);

        }
    }

    // OrderNote
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OrderNoteMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrderNote>
    {
        public OrderNoteMapping()
            : this("dbo")
        {
        }

        public OrderNoteMapping(string schema)
        {
            Property(x => x.OrdernoteId).IsUnicode(false);
            Property(x => x.SaleValue).HasPrecision(19,4);
            Property(x => x.TotalPriceNonDisc).HasPrecision(19,4);
            Property(x => x.Vat).HasPrecision(19,4);
            Property(x => x.CusId).IsOptional().IsUnicode(false);
            Property(x => x.EmpId).IsOptional().IsUnicode(false);
            Property(x => x.TotalPrice).HasPrecision(19,4);
            Property(x => x.CustomerPay).HasPrecision(19,4);
            Property(x => x.PayBack).HasPrecision(19,4);

        }
    }

    // OrderNoteDetails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OrderNoteDetailMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrderNoteDetail>
    {
        public OrderNoteDetailMapping()
            : this("dbo")
        {
        }

        public OrderNoteDetailMapping(string schema)
        {
            Property(x => x.OrdernoteId).IsUnicode(false);
            Property(x => x.ProductId).IsUnicode(false);

        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProductMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Product>
    {
        public ProductMapping()
            : this("dbo")
        {
        }

        public ProductMapping(string schema)
        {
            Property(x => x.ProductId).IsUnicode(false);
            Property(x => x.Info).IsOptional();
            Property(x => x.Price).HasPrecision(19,4);
            Property(x => x.ImageLink).IsOptional();
        }
    }

    // ProductDetails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProductDetailMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductDetail>
    {
        public ProductDetailMapping()
            : this("dbo")
        {
        }

        public ProductDetailMapping(string schema)
        {
            Property(x => x.PdetailId).IsUnicode(false);
            Property(x => x.ProductId).IsUnicode(false);
            Property(x => x.IgdId).IsUnicode(false);

        }
    }

    // SalaryNote
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SalaryNoteMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalaryNote>
    {
        public SalaryNoteMapping()
            : this("dbo")
        {
        }

        public SalaryNoteMapping(string schema)
        {
            Property(x => x.SnId).IsUnicode(false);
            Property(x => x.EmpId).IsUnicode(false);
            Property(x => x.DatePay).IsOptional();
            Property(x => x.SalaryValue).HasPrecision(19,4);

        }
    }

    // Stock
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StockMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Stock>
    {
        public StockMapping()
            : this("dbo")
        {
        }

        public StockMapping(string schema)
        {
            Property(x => x.StoId).IsUnicode(false);
            Property(x => x.ApwarehouseId).IsUnicode(false);
            Property(x => x.StId).IsOptional().IsUnicode(false);
            Property(x => x.StandardPrice).HasPrecision(19,4);
            Property(x => x.Info).IsOptional();
            Property(x => x.Supplier).IsOptional();

        }
    }

    // StockIn
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StockInMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StockIn>
    {
        public StockInMapping()
            : this("dbo")
        {
        }

        public StockInMapping(string schema)
        {
            Property(x => x.SiId).IsUnicode(false);
            Property(x => x.AdId).IsOptional().IsUnicode(false);
            Property(x => x.TotalAmount).HasPrecision(19,4);

        }
    }

    // StockInDetails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StockInDetailMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StockInDetail>
    {
        public StockInDetailMapping()
            : this("dbo")
        {
        }

        public StockInDetailMapping(string schema)
        {
            Property(x => x.SiId).IsUnicode(false);
            Property(x => x.StoId).IsUnicode(false);
            Property(x => x.ItemPrice).HasPrecision(19,4);
            Property(x => x.Note).IsOptional();

        }
    }

    // StockOut
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StockOutMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StockOut>
    {
        public StockOutMapping()
            : this("dbo")
        {
        }

        public StockOutMapping(string schema)
        {
            Property(x => x.StockoutId).IsUnicode(false);
            Property(x => x.AdId).IsOptional().IsUnicode(false);
            Property(x => x.Vat).HasPrecision(19,4);
            Property(x => x.TotalAmount).HasPrecision(19,4);

        }
    }

    // StockOutDetails
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StockOutDetailMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StockOutDetail>
    {
        public StockOutDetailMapping()
            : this("dbo")
        {
        }

        public StockOutDetailMapping(string schema)
        {
            Property(x => x.StockoutId).IsUnicode(false);
            Property(x => x.StockId).IsUnicode(false);

        }
    }

    // StockType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StockTypeMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StockType>
    {
        public StockTypeMapping()
            : this("dbo")
        {
        }

        public StockTypeMapping(string schema)
        {
            Property(x => x.StId).IsUnicode(false);
        }
    }

    // WorkingHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WorkingHistoryMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkingHistory>
    {
        public WorkingHistoryMapping()
            : this("dbo")
        {
        }

        public WorkingHistoryMapping(string schema)
        {
            Property(x => x.WhId).IsUnicode(false);
            Property(x => x.ResultSalary).IsOptional().IsUnicode(false);
            Property(x => x.EmpId).IsOptional().IsUnicode(false);

        }
    }

    #endregion

}
// </auto-generated>

